version: "3.8"

services:
  server:
    build:
      context: .
      dockerfile: dockerfiles/nginx.dockerfile
    container_name: nginx
    ports:
      - '80:80'
    volumes: 
      - ${PROJECT_VOLUME}
      - ./configs/nginx.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - php
      - mysql
      - postgres
      - adminer
  php:
    build:
      context: .
      dockerfile: dockerfiles/php.dockerfile
    container_name: php
    user: '${UID}:${UID}'
    volumes:
      - ${PROJECT_VOLUME}
      - ./configs/php.ini:/usr/local/etc/php/conf.d/custom.ini
  mysql:
    build:
      context: .
      dockerfile: dockerfiles/mysql.dockerfile
    container_name: mysql
    ports:
      - "3306:3306"
    env_file:
      - ./mysql/mysql.env
    volumes:
      - ./mysql/init:/docker-entrypoint-initdb.d
  postgres:
    image: postgres:14.1
    container_name: postgres
    restart: always
    user: '${UID}:${UID}'
    env_file:
      - postgres/postgres.env
    volumes:
      - /etc/passwd:/etc/passwd:ro
      - ./postgres/data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
  adminer:
    image: adminer
    container_name: adminer
    restart: always
    ports:
      - "8090:8080"
  composer:
    build:
      context: .
      dockerfile: dockerfiles/composer.dockerfile
    container_name: composer
    user: '${UID}:${UID}'
    volumes:
      - ${PROJECT_VOLUME}
  artisan:
    build:
      context: .
      dockerfile: ./dockerfiles/php.dockerfile
      args:
        install_node: 1
    container_name: artisan
    user: '${UID}:${UID}'
    volumes:
      - ${PROJECT_VOLUME}
    entrypoint: ["php", "${WORKING_DIR}/artisan"]
  npm:
    image: node:14
    container_name: npm
    working_dir: ${WORKING_DIR}
    entrypoint: ["npm"]
    volumes: 
      - ${PROJECT_VOLUME}
  node:
    image: node:14
    container_name: node
    working_dir: ${WORKING_DIR}
    volumes:
      - ${PROJECT_VOLUME}